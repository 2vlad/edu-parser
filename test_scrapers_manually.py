#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.storage import Storage
from core.logging_config import setup_logging, get_logger

# Setup logging
setup_logging(log_level="INFO")
logger = get_logger(__name__)

def test_single_scraper():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∫—Ä–µ–π–ø–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä"""
    print("üß™ –¢–ï–°–¢ –û–¢–î–ï–õ–¨–ù–´–• –°–ö–†–ï–ô–ü–ï–†–û–í")
    print("=" * 60)
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    test_scrapers = [
        ("HSE Excel", "scrapers.hse", "scrape_hse_online_cs_2024"),
        ("MIPT HTML", "scrapers.mipt", "scrape_mipt_data_science"),
        ("MEPhI HTML", "scrapers.mephi", "scrape_mephi_machine_learning")
    ]
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–µ–π–ø–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for i, (name, module, func) in enumerate(test_scrapers, 1):
        print(f"{i}. {name}")
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ")
    print("5. –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
        
        if choice == "5":
            show_available_scrapers()
            return
        elif choice == "4":
            test_multiple_scrapers()
            return
        elif choice in ["1", "2", "3"]:
            idx = int(choice) - 1
            name, module_name, func_name = test_scrapers[idx]
            
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
            print("-" * 40)
            
            # Import and run scraper
            try:
                module = __import__(module_name, fromlist=[func_name])
                scraper_func = getattr(module, func_name)
                
                print(f"‚è≥ –ó–∞–ø—É—Å–∫ {func_name}...")
                start_time = datetime.now()
                
                result = scraper_func()
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f}s")
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"   Status: {result.get('status', 'unknown')}")
                print(f"   Count: {result.get('count', 'N/A')}")
                print(f"   Name: {result.get('name', 'N/A')}")
                if result.get('error'):
                    print(f"   Error: {result['error']}")
                
                # Save to database
                if input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É? (y/n): ").lower() == 'y':
                    save_result_to_db(result)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–µ–π–ø–µ—Ä–∞: {e}")
                import traceback
                traceback.print_exc()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_available_scrapers():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã"""
    print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –°–ö–†–ï–ô–ü–ï–†–´")
    print("=" * 60)
    
    try:
        from core.registry import ScraperRegistry
        
        # Mock storage
        class MockStorage:
            def load_enabled_scrapers(self): return []
        
        registry = ScraperRegistry(storage=MockStorage())
        count = registry.discover_scrapers()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {count} —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤:\n")
        
        # Group by module
        by_module = {}
        for scraper_id, info in registry.scrapers.items():
            module = info['module']
            if module not in by_module:
                by_module[module] = []
            by_module[module].append((scraper_id, info['config'].get('name', 'Unknown')))
        
        for module_name, scrapers in sorted(by_module.items()):
            print(f"üìÅ {module_name}:")
            for scraper_id, name in scrapers:
                print(f"   - {scraper_id}: {name}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")


def test_multiple_scrapers():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤"""
    print("\nüöÄ –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ö–†–ï–ô–ü–ï–†–û–í")
    print("=" * 60)
    
    # –í—ã–±–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–∫—Ä–µ–π–ø–µ—Ä—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_scrapers = [
        ("HSE", "scrapers.hse", lambda: test_hse_scraper()),
        ("MIPT", "scrapers.mipt", lambda: test_mipt_scraper()),
        ("MEPhI", "scrapers.mephi", lambda: test_mephi_scraper())
    ]
    
    results = []
    
    for name, module_name, test_func in test_scrapers:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
        try:
            result = test_func()
            results.append((name, result))
            
            status_icon = "‚úÖ" if result.get('status') == 'success' else "‚ùå"
            print(f"{status_icon} {name}: {result.get('status')} | Count: {result.get('count', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")
            results.append((name, {'status': 'error', 'error': str(e)}))
    
    # Summary
    print("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 30)
    successful = sum(1 for _, r in results if r.get('status') == 'success')
    print(f"–£—Å–ø–µ—à–Ω–æ: {successful}/{len(results)}")
    
    if successful > 0:
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å {successful} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É? (y/n): ", end="")
        if input().lower() == 'y':
            for name, result in results:
                if result.get('status') == 'success':
                    save_result_to_db(result)
                    print(f"‚úÖ {name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")


def test_hse_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω HSE —Å–∫—Ä–µ–π–ø–µ—Ä"""
    from scrapers.hse import get_scrapers
    scrapers = get_scrapers()
    if scrapers:
        scraper_func, config = scrapers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {config['name']}")
        return scraper_func(config)  # –ü–µ—Ä–µ–¥–∞–µ–º config –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    else:
        return {'status': 'error', 'error': 'No HSE scrapers found'}


def test_mipt_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω MIPT —Å–∫—Ä–µ–π–ø–µ—Ä"""
    from scrapers.mipt import get_scrapers
    scrapers = get_scrapers()
    if scrapers:
        scraper_func, config = scrapers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {config['name']}")
        return scraper_func(config)  # –ü–µ—Ä–µ–¥–∞–µ–º config –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    else:
        return {'status': 'error', 'error': 'No MIPT scrapers found'}


def test_mephi_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω MEPhI —Å–∫—Ä–µ–π–ø–µ—Ä"""
    from scrapers.mephi import get_scrapers
    scrapers = get_scrapers()
    if scrapers:
        scraper_func, config = scrapers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {config['name']}")
        return scraper_func(config)  # –ü–µ—Ä–µ–¥–∞–µ–º config –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    else:
        return {'status': 'error', 'error': 'No MEPhI scrapers found'}


def save_result_to_db(result):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        storage = Storage()
        success = storage.save_scraper_result(
            scraper_id=result.get('scraper_id', 'manual_test'),
            name=result.get('name', 'Manual Test'),
            count=result.get('count'),
            status=result.get('status', 'unknown'),
            error=result.get('error'),
            date=datetime.now().date()
        )
        
        if success:
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            print("üåê –û–±–Ω–æ–≤–∏—Ç–µ dashboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: https://web-production-5db6.up.railway.app/")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def quick_health_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüè• –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # Database connection
    try:
        storage = Storage()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
    except Exception as e:
        print(f"‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: {e}")
        return
    
    # Scraper discovery
    try:
        from core.registry import ScraperRegistry
        
        class MockStorage:
            def load_enabled_scrapers(self): return []
        
        registry = ScraperRegistry(storage=MockStorage())
        count = registry.discover_scrapers()
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤: {count}")
    except Exception as e:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤: {e}")
    
    # Recent data
    try:
        from datetime import timedelta
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)
        
        results = storage.client.table('applicant_counts')\
            .select('date')\
            .gte('date', yesterday.isoformat())\
            .execute()
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {len(results.data)}")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("üîß –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–†–ï–ô–ü–ï–†–û–í")
    print("=" * 60)
    print("Dashboard: https://web-production-5db6.up.railway.app/")
    print("=" * 60)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∫—Ä–µ–π–ø–µ—Ä")
        print("2. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è)")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã")
        print("4. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "1":
            test_single_scraper()
        elif choice == "2":
            test_multiple_scrapers()
        elif choice == "3":
            show_available_scrapers()
        elif choice == "4":
            quick_health_check()
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()