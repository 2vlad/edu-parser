#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ production Supabase
"""

import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.storage import Storage

def check_production_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase."""
    print("üîç –ü–†–û–í–ï–†–ö–ê PRODUCTION –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    try:
        storage = Storage()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   URL: {os.getenv('SUPABASE_URL')[:30]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞...")
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=7)
        
        results = storage.client.table('applicant_counts')\
            .select('*')\
            .gte('date', start_date.isoformat())\
            .order('created_at', desc=True)\
            .limit(20)\
            .execute()
        
        if results.data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results.data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
            by_date = {}
            for r in results.data:
                date = r['date']
                if date not in by_date:
                    by_date[date] = {'success': 0, 'error': 0, 'total': 0}
                by_date[date]['total'] += 1
                if r['status'] == 'success':
                    by_date[date]['success'] += 1
                else:
                    by_date[date]['error'] += 1
            
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:")
            for date in sorted(by_date.keys(), reverse=True):
                stats = by_date[date]
                success_rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
                print(f"   {date}: {stats['total']} —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤ | "
                      f"‚úÖ {stats['success']} —É—Å–ø–µ—à–Ω–æ | "
                      f"‚ùå {stats['error']} –æ—à–∏–±–æ–∫ | "
                      f"üìà {success_rate:.1f}% —É—Å–ø–µ—Ö")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for r in results.data[:5]:
                status_icon = '‚úÖ' if r['status'] == 'success' else '‚ùå'
                count = r.get('count', 'N/A')
                print(f"   {status_icon} {r['date']} | {r['name']} | –ó–∞—è–≤–æ–∫: {count}")
                
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–æ–±—â–µ –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            all_results = storage.client.table('applicant_counts')\
                .select('date')\
                .order('date', desc=True)\
                .limit(1)\
                .execute()
            
            if all_results.data:
                print(f"‚ÑπÔ∏è  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç: {all_results.data[0]['date']}")
            else:
                print("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤...")
    try:
        scrapers = storage.client.table('scrapers_config')\
            .select('*')\
            .execute()
        
        if scrapers.data:
            enabled = [s for s in scrapers.data if s.get('enabled', False)]
            print(f"‚úÖ –í—Å–µ–≥–æ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {len(scrapers.data)}")
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {len(enabled)}")
            
            if enabled:
                print("\nüîß –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã:")
                for s in enabled[:5]:
                    print(f"   - {s['scraper_id']}: {s['name']}")
                if len(enabled) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(enabled) - 5}")
        else:
            print("‚ö†Ô∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è dashboard...")
    dashboard_vars = {
        'SUPABASE_URL': '‚úÖ' if os.getenv('SUPABASE_URL') else '‚ùå',
        'SUPABASE_KEY': '‚úÖ' if os.getenv('SUPABASE_KEY') else '‚ùå',
        'FLASK_SECRET_KEY': '‚úÖ' if os.getenv('FLASK_SECRET_KEY') else '‚ö†Ô∏è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default)',
        'DASHBOARD_ALLOWED_IPS': os.getenv('DASHBOARD_ALLOWED_IPS', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö)')
    }
    
    for var, status in dashboard_vars.items():
        print(f"   {var}: {status}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã: python main.py")
    print("2. Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://artistic-surprise.up.railway.app/")
    print("3. Health check: https://artistic-surprise.up.railway.app/health")
    print("4. –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DASHBOARD_ALLOWED_IPS –≤ Railway")


if __name__ == "__main__":
    check_production_data()