#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ HSE —Å–∫—Ä–µ–π–ø–µ—Ä–∞
"""

import os
import sys
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.logging_config import setup_logging, get_logger
from scrapers.hse import download_hse_excel, APPLICATION_COUNT_COLUMNS, HSE_TARGET_PROGRAMS

setup_logging(log_level="DEBUG")
logger = get_logger(__name__)

def debug_hse_excel():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ HSE Excel —Ñ–∞–π–ª–∞"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê HSE EXCEL")
    print("=" * 60)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º Excel
    print("\n1Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º Excel —Ñ–∞–π–ª...")
    df = download_hse_excel()
    
    if df is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª")
        return
    
    print(f"‚úÖ Excel –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    print(f"\n2Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ({len(df.columns)}):")
    for i, col in enumerate(df.columns):
        print(f"   {i}: '{col}'")
    
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∑–∞—è–≤–ª–µ–Ω–∏—è–º–∏
    print(f"\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞—è–≤–ª–µ–Ω–∏—è–º–∏...")
    found_column = None
    for col_name in APPLICATION_COUNT_COLUMNS:
        if col_name in df.columns:
            found_column = col_name
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: '{col_name}'")
            break
    
    if not found_column:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∑–∞—è–≤–ª–µ–Ω–∏—è–º–∏")
        print("\n–ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ:")
        for col in df.columns:
            if any(word in col.lower() for word in ['–∑–∞—è–≤–ª', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–∫–æ–ª']):
                print(f"   –ü–æ—Ö–æ–∂–∞—è: '{col}'")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–µ
    print(f"\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–∫–∏ '{found_column}':")
    app_count_data = df[found_column]
    
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(app_count_data)}")
    print(f"   –ù–µ-null –∑–∞–ø–∏—Å–µ–π: {app_count_data.notna().sum()}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {app_count_data.nunique()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\n   –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π:")
    for i, val in enumerate(app_count_data.head(10)):
        print(f"     {i}: '{val}' (—Ç–∏–ø: {type(val)})")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
    print(f"\n5Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º
    program_columns = []
    for col in df.columns:
        if any(word in col.lower() for word in ['–ø—Ä–æ–≥—Ä–∞–º–º', '–Ω–∞–ø—Ä–∞–≤–ª', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω']):
            program_columns.append(col)
    
    if program_columns:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏: {program_columns}")
        
        for program_col in program_columns:
            print(f"\n   –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–∫–∏ '{program_col}':")
            programs = df[program_col].dropna()
            print(f"   –ó–∞–ø–∏—Å–µ–π: {len(programs)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–û–ù–õ–ê–ô–ù"
            online_programs = programs[programs.str.contains('–û–ù–õ–ê–ô–ù', na=False, case=False)]
            print(f"   –û–ù–õ–ê–ô–ù –ø—Ä–æ–≥—Ä–∞–º–º: {len(online_programs)}")
            
            if len(online_programs) > 0:
                print("   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –û–ù–õ–ê–ô–ù –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
                for i, prog in enumerate(online_programs.head(10)):
                    print(f"     {i}: '{prog}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            print(f"\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º:")
            for target_prog in HSE_TARGET_PROGRAMS[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5
                matches = programs[programs.str.contains(target_prog, na=False, case=False)]
                if len(matches) > 0:
                    print(f"     ‚úÖ '{target_prog}': –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π
                    for idx in matches.index:
                        count_val = df.loc[idx, found_column]
                        print(f"        –ó–∞—è–≤–ª–µ–Ω–∏–π: '{count_val}'")
                else:
                    print(f"     ‚ùå '{target_prog}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("\n   –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        print(df.head(3).to_string())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print(f"\n6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        df.to_excel('debug_hse_data.xlsx', index=False)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ debug_hse_data.xlsx")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    debug_hse_excel()